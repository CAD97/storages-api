var searchIndex = JSON.parse('{\
"storage_api":{"doc":"A proof-of-concept implementation of (one version of) the …","t":[3,8,16,3,3,8,3,3,8,3,3,3,3,8,8,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocStorage","Handle","Handle","InlineStorage","InlineStorageHandle","MultipleStorage","OneUseArenaStorage","OneUseArenaStorageHandle","PinningStorage","RawBox","RawVec","RefStorage","RefStorageHandle","SharedMutabilityStorage","SliceStorage","SmallStorage","SmallStorageHandle","Storage","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","cmp","cmp","cmp","create","create","create","create","create","create","create","destroy","destroy","destroy","destroy","destroy","destroy","destroy","drop","drop","eq","eq","eq","eq","fits","from","from","from","from","from","from","from","from","from","from","from","from_raw_parts","get","get_mut","grow","grow","grow_to","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into_raw_parts","len","metadata","new","new","new","new","new","new","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","resolve","resolve","resolve","resolve","resolve","resolve","resolve","resolve_metadata","resolve_metadata","resolve_metadata","resolve_metadata","resolve_metadata","resolve_metadata","resolve_metadata","resolve_mut","resolve_mut","resolve_mut","resolve_mut","resolve_mut","resolve_mut","resolve_mut","shrink","shrink","shrink_to","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["storage_apid":["A storage that stores objects via an <code>Allocator</code>.","Types which can be used as a storage handle.","The handle which is used to access","A single storage which stores objects inline.","A handle into an [<code>InlineStorage]</code>.","A storage that can create multiple handles.","","A handle into a [<code>ArenaStorage]</code>.","A storage that creates pinned handles.","A raw box around some storage. Bundles the storage and its …","A raw vec around some slice storage. Bundles the storage …","A storage wrapper around <code>&amp;mut T</code>.","A handle into a [<code>RefStorage]</code>.","A storage that serves as a uniqueness barrier.","A storage that can reallocate to adjust the length of …","A single storage which stores objects inline if it fits, …","","Types which can be used to store objects.","Get a pointer valid for reads and writes to the object.","Get a pointer valid for reads and writes to the slice.","Get a pointer valid <em>for reads only</em> to the object.","Get a pointer valid <em>for reads only</em> to the slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an object handle in this storage.","","","","Always returns an error. See the type docs for more info.","Always returns an error. See the type docs for more info.","","Destroy an object handle in this storage.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get the wrapped reference without going through a storage …","Get the wrapped reference without going through a storage …","Grow a slice handle to a larger size.","","Grow the length of the slice to <code>new_len</code>. Does not change …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Get the length of the slice.","Get the metadata of the inner object.","","","","","","Create a new box for the object described by the given …","Create a new empty growable slice in the given storage.","Create a new borrowed storage.","","","","","","","","Resolve an object handle in this storage to a pointer.","","","","","","","Resolve the metadata of a handle in this storage.","","","","","","","Resolve an object handle in this storage to a pointer.","","","","","","","Shrink a slice handle to a smaller size.","","Shrink the length of the slice to <code>new_len</code>. Does not change …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,3,4,5,6,7,8,2,3,9,10,11,12,4,5,6,7,8,2,3,9,10,11,12,6,8,10,12,6,8,10,12,1,4,5,7,9,9,11,1,4,5,7,9,9,11,2,3,6,8,10,12,5,4,5,6,7,8,2,3,9,10,11,12,2,9,9,13,4,3,6,8,10,12,4,5,6,7,8,2,3,9,10,11,12,2,3,2,4,5,6,7,8,2,3,9,10,11,12,6,8,10,12,1,4,5,7,9,9,11,1,4,5,7,9,9,11,1,4,5,7,9,9,11,13,4,3,4,5,6,7,8,2,3,9,10,11,12,4,5,6,7,8,2,3,9,10,11,12,4,5,6,7,8,2,3,9,10,11,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["ordering",4]],[[["",0],["",0]],["ordering",4]],[[["",0],["",0]],["ordering",4]],[[["",0],["",0]],["ordering",4]],[[["",0]],["result",4,[["allocerror",3]]]],[[["",0]],["result",4,[["allocerror",3]]]],[[["",0]],["result",4,[["allocerror",3]]]],[[["",0]],["result",4,[["allocerror",3]]]],[[["",0]],["result",4,[["allocerror",3]]]],[[["",0]],["result",4,[["allocerror",3]]]],[[["",0]],["result",4,[["allocerror",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0]],["result",4,[["allocerror",3]]]],[[["",0],["usize",0]],["result",4,[["allocerror",3]]]],[[["",0],["usize",0]],["result",4,[["allocerror",3]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]]],[[]],[[]],[[]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0]],["nonnull",3]],[[["",0],["usize",0]],["result",4,[["allocerror",3]]]],[[["",0],["usize",0]],["result",4,[["allocerror",3]]]],[[["",0],["usize",0]],["result",4,[["allocerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[8,"Storage"],[3,"RawBox"],[3,"RawVec"],[3,"AllocStorage"],[3,"InlineStorage"],[3,"InlineStorageHandle"],[3,"OneUseArenaStorage"],[3,"OneUseArenaStorageHandle"],[3,"RefStorage"],[3,"RefStorageHandle"],[3,"SmallStorage"],[3,"SmallStorageHandle"],[8,"SliceStorage"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};