var searchIndex = JSON.parse('{\
"storage_api":{"doc":"A proof-of-concept implementation of (one version of) the …","t":[3,16,3,6,8,8,3,3,8,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,10,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocStorage","Handle","InlineStorage","Memory","MultipleStorage","PinningStorage","RawBox","RawVec","SharedMutabilityStorage","SmallStorage","Storage","allocate","allocate","allocate","allocate","as_mut","as_mut","as_mut_ptr","as_ptr","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deallocate","deallocate","deallocate","deallocate","drop","drop","fits","from","from","from","from","from","grow","grow","grow","grow","grow_to","into","into","into","into","into","len","metadata","new","new","new","new","new","resolve","resolve","resolve","resolve","resolve_many_mut","resolve_many_mut","resolve_mut","resolve_mut","resolve_mut","resolve_mut","resolve_raw","resolve_raw","shrink","shrink","shrink","shrink","shrink_to","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["storage_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A storage that stores objects via an <code>Allocator</code>.","The handle which is used to access the stored memory.","A single storage which stores memory inline.","","A storage that can manage multiple memory handles.","A storage that allocates pinned memory handles.","A raw box around some storage. Bundles the storage and its …","A raw vec around some slice storage. Bundles the storage …","A storage that serves as a uniqueness barrier.","A single storage which stores memory inline if it fits, …","Types which can be used to manage memory handles.","Allocate memory handle in this storage.","","","","Get a mutable reference to the boxed object.","Get a mutable reference to the boxed slice.","Get a pointer valid for reads and writes to the boxed …","Get a pointer valid <em>for reads only</em> to the boxed object.","Get a reference to the boxed object.","Get a reference to the boxed slice.","","","","","","","","","","","Deallocate an object handle in this storage.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Grow a memory handle to a larger size.","","","","Grow the length of the slice to <code>new_len</code>. Does not change …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the length of the slice.","Get the metadata of the boxed object.","","","Create a new box for the object described by the given …","Create a new empty growable slice in the given storage.","","Resolve a memory handle in this storage to a reference.","","","","Resolve memory handles in this storage to mutable …","","Resolve a memory handle in this storage to a mutable …","","","","Resolve a memory handle in this storage to a mutable …","","Shrink a memory handle to a smaller size.","","","","Shrink the length of the slice to <code>new_len</code>. Does not change …","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,5,5,5,6,2,3,5,6,4,2,3,5,6,4,1,2,3,4,5,6,3,2,3,5,6,4,1,2,3,4,6,2,3,5,6,4,6,5,2,3,5,6,4,1,2,3,4,7,2,1,2,3,4,8,2,1,2,3,4,6,2,3,5,6,4,2,3,5,6,4,2,3,5,6,4],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["",0],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0]],["maybeuninit",19]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["maybeuninit",19]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["layout",3]]],[[["",0],["layout",3]]],[[["",0],["layout",3]]],[[["",0],["layout",3]]],[[["",0]]],[[["",0]]],[[["",0],["layout",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[["",0],["layout",3],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["layout",3],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["layout",3],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["layout",3],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["usize",0]],["result",4,[["allocerror",3]]]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[["",0],["layout",3]],["memory",6]],[[["",0],["layout",3]],["memory",6]],[[["",0],["layout",3]],["memory",6]],[[["",0],["layout",3]],["memory",6]],[[["",0]]],[[["",0]]],[[["",0],["layout",3]],["memory",6]],[[["",0],["layout",3]],["memory",6]],[[["",0],["layout",3]],["memory",6]],[[["",0],["layout",3]],["memory",6]],[[["",0],["layout",3]],["memory",6]],[[["",0],["layout",3]],["memory",6]],[[["",0],["layout",3],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["layout",3],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["layout",3],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["layout",3],["layout",3]],["result",4,[["allocerror",3]]]],[[["",0],["usize",0]],["result",4,[["allocerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[8,"Storage"],[3,"AllocStorage"],[3,"InlineStorage"],[3,"SmallStorage"],[3,"RawBox"],[3,"RawVec"],[8,"MultipleStorage"],[8,"SharedMutabilityStorage"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};